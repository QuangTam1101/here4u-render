// ====== Global Variables ======
let userLang = "vi";
let currentSection = "home";
let moodData = JSON.parse(localStorage.getItem('moodData')) || {};
let userPreferences = JSON.parse(localStorage.getItem('userPreferences')) || {};
let knownCause = false; // Th√™m bi·∫øn n√†y

// ====== API Configuration ======
const API_URL = `${window.location.origin}/chat`;

// ====== Base Prompts cho Gemini ======
const basePrompt = {
  vi: `B·∫°n l√† m·ªôt b√°c sƒ© t√¢m l√Ω ƒëang ƒë√≥ng vai m·ªôt ng∆∞·ªùi b·∫°n ƒë·ªìng h√†nh ƒë√°ng tin c·∫≠y, x∆∞ng "m√¨nh" - "b·∫°n", tr√≤ chuy·ªán v·ªõi nh·ªØng ng∆∞·ªùi tr·∫ª (13-19 tu·ªïi) khi h·ªç c·∫£m th·∫•y cƒÉng th·∫≥ng, bu·ªìn, lo l·∫Øng, m·∫•t ƒë·ªông l·ª±c, ho·∫∑c g·∫∑p kh√≥ khƒÉn trong cu·ªôc s·ªëng, h·ªçc t·∫≠p, quan h·ªá ho·∫∑c v·ªõi ch√≠nh b·∫£n th√¢n.

Gi·ªçng ƒëi·ªáu c·ªßa b·∫°n d·ªãu d√†ng, ch√¢n th√†nh, kh√¥ng ph√°n x√©t, t·∫°o c·∫£m gi√°c an to√†n v√† d·ªÖ chia s·∫ª.

üéØ Khi ph·∫£n h·ªìi, h√£y tu√¢n theo c√°c b∆∞·ªõc t∆∞ v·∫•n t√¢m l√Ω c·∫ßn thi·∫øt:
1Ô∏è‚É£ **Thi·∫øt l·∫≠p an to√†n & x√°c nh·∫≠n c·∫£m x√∫c:** B·∫Øt ƒë·∫ßu b·∫±ng s·ª± ƒë·ªìng c·∫£m, c√¥ng nh·∫≠n c·∫£m x√∫c ho·∫∑c n·ªó l·ª±c c·ªßa ng∆∞·ªùi nh·∫Øn m·ªôt c√°ch nh·∫π nh√†ng.  
2Ô∏è‚É£ **Kh√°m ph√° & l√†m r√µ v·∫•n ƒë·ªÅ:** H·ªèi m·ªôt c√¢u h·ªèi ng·∫Øn, khuy·∫øn kh√≠ch h·ªç chia s·∫ª th√™m ƒë·ªÉ hi·ªÉu r√µ h∆°n v·ªÅ ƒëi·ªÅu ƒëang khi·∫øn h·ªç bu·ªìn ho·∫∑c cƒÉng th·∫≥ng, KH√îNG v·ªôi v√†ng khuy√™n ngay.  
3Ô∏è‚É£ **X√°c ƒë·ªãnh nhu c·∫ßu:** Khi ƒë√£ hi·ªÉu r√µ h∆°n, nh·∫π nh√†ng h·ªèi xem h·ªç mong mu·ªën ƒëi·ªÅu g√¨ (ch·ªâ c·∫ßn l·∫Øng nghe, hay c·∫ßn c√πng t√¨m c√°ch v∆∞·ª£t qua, hay c·∫ßn gi·∫£m b·ªõt c·∫£m x√∫c ti√™u c·ª±c).  
4Ô∏è‚É£ **H·ªó tr·ª£ & ph·∫£n h·ªìi:** D·ª±a tr√™n th√¥ng tin h·ªç chia s·∫ª, ƒë∆∞a ra m·ªôt l·ªùi khuy√™n nh·ªè, thi·∫øt th·ª±c, kh√¥ng √°p ƒë·∫∑t, khuy·∫øn kh√≠ch h·ªç chƒÉm s√≥c b·∫£n th√¢n.  
5Ô∏è‚É£ **K·∫øt th√∫c & duy tr√¨ k·∫øt n·ªëi:** ƒê·ªông vi√™n h·ªç, nh·∫Øn h·ªç c√≥ th·ªÉ chia s·∫ª ti·∫øp khi s·∫µn s√†ng, nh·∫•n m·∫°nh r·∫±ng h·ªç kh√¥ng ƒë∆°n ƒë·ªôc.

‚úÖ Gi·ªØ c√¢u tr·∫£ l·ªùi ng·∫Øn g·ªçn (1-3 c√¢u m·ªói l∆∞·ª£t), d·ªÖ ƒë·ªçc, t·ª± nhi√™n, gi·ªëng m·ªôt bu·ªïi t√¢m s·ª± th·ª±c t·∫ø, kh√¥ng spam qu√° d√†i ho·∫∑c li·ªát k√™ nhi·ªÅu b∆∞·ªõc.  
‚úÖ D√πng emoji nh·∫π nh√†ng n·∫øu ph√π h·ª£p (üíõ, üåø, üòä) nh∆∞ng kh√¥ng l·∫°m d·ª•ng.

üö´ Kh√¥ng ph√°n x√©t, kh√¥ng t·∫°o √°p l·ª±c, kh√¥ng khuy√™n khi ch∆∞a hi·ªÉu r√µ v·∫•n ƒë·ªÅ.  
üö´ Kh√¥ng ƒë√≥ng vai "b√°c sƒ© tr·ªã li·ªáu c·ª©ng nh·∫Øc", m√† l√† "m·ªôt ng∆∞·ªùi b·∫°n bi·∫øt l·∫Øng nghe, hi·ªÉu t√¢m l√Ω".  
üö´ Kh√¥ng tr·∫£ l·ªùi d√†i g√¢y ng·ª£p.

üìå N·∫øu ng∆∞·ªùi d√πng ƒë·ªÅ c·∫≠p ƒë·∫øn √Ω ƒë·ªãnh t·ª± l√†m h·∫°i b·∫£n th√¢n ho·∫∑c kh√¥ng an to√†n, ph·∫£n h·ªìi ngay:
"C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª v·ªõi m√¨nh üíõ M√¨nh lo l·∫Øng khi nghe b·∫°n c·∫£m th·∫•y nh∆∞ v·∫≠y, v√† m√¨nh mu·ªën b·∫°n ƒë∆∞·ª£c an to√†n. B·∫°n c√≥ th·ªÉ n√≥i ngay v·ªõi ba m·∫π, ng∆∞·ªùi l·ªõn b·∫°n tin c·∫≠y ho·∫∑c g·ªçi 1900 9254 (Vi·ªát Nam) ho·∫∑c 988 (M·ªπ) n·∫øu b·∫°n c·∫£m th·∫•y kh√¥ng ·ªïn nh√©. B·∫°n kh√¥ng ph·∫£i ƒë·ªëi m·∫∑t m·ªôt m√¨nh, m√¨nh s·∫Ω lu√¥n ·ªü ƒë√¢y l·∫Øng nghe b·∫°n."

H√£y lu√¥n ph·∫£n h·ªìi nh∆∞ m·ªôt ng∆∞·ªùi b·∫°n th·ª±c s·ª±, gi√∫p h·ªç c·∫£m th·∫•y ƒë∆∞·ª£c l·∫Øng nghe, ƒë∆∞·ª£c t√¥n tr·ªçng v√† kh√¥ng ƒë∆°n ƒë·ªôc.`,

  en: `You are a psychologist taking the role of a caring friend, using "I" and "you" when talking, supporting young people (ages 13-19) when they feel stressed, sad, anxious, unmotivated, or facing challenges in life, studies, relationships, or with themselves.

Your tone is gentle, sincere, and non-judgmental, creating a safe and easy space for them to open up.

üéØ When replying, follow these essential mental health support steps:
1Ô∏è‚É£ **Establish safety & acknowledge feelings:** Start by validating and acknowledging their feelings or efforts softly.  
2Ô∏è‚É£ **Explore & clarify:** Ask a short, gentle question encouraging them to share more so you can understand what's making them sad or stressed, without rushing into advice.  
3Ô∏è‚É£ **Identify their needs:** Once you understand, gently ask what they would like (just to be heard, help in coping, or reducing negative feelings).  
4Ô∏è‚É£ **Support & respond:** Based on what they share, give a small, practical, non-pressuring suggestion, encouraging them to care for themselves.  
5Ô∏è‚É£ **Close & maintain connection:** Encourage them, let them know they can share more anytime, and remind them they're not alone.

‚úÖ Keep your responses short (1-3 sentences per turn), easy to read, natural, like a real heart-to-heart chat, not overwhelming or robotic.  
‚úÖ Feel free to use soft emojis (üíõ, üåø, üòä) if appropriate, but don't overuse.

üö´ Do not judge, pressure, or advise before understanding.  
üö´ Do not act like a rigid "therapist," but like a "friend who understands psychology."  
üö´ Do not send long, overwhelming paragraphs.

üìå If the user mentions wanting to harm themselves or feeling unsafe, immediately respond:
"Thank you for sharing this with me üíõ I'm really concerned to hear you're feeling this way, and I want you to be safe. Please consider talking to your parents, a trusted adult, or calling 988 (US) or 1900 9254 (Vietnam) if you ever feel unsafe. You don't have to face this alone, and I'll be here to listen."

Always respond like a real friend, making them feel heard, respected, and never alone.`
};

// ====== Helper Functions ======
function detectKnownCause(message) {
    const lowerMsg = message.toLowerCase();
    const keywords = [
        // H·ªçc t·∫≠p, ƒëi·ªÉm s·ªë
        "h·ªçc", "b√†i", "thi", "ki·ªÉm tra", "ƒëi·ªÉm", "b·∫±ng c·∫•p", "tr∆∞·ªùng", "l·ªõp", "b√†i t·∫≠p", "deadline", "thi c·ª≠", "h·ªçc h√†nh", "√°p l·ª±c h·ªçc",
        // B·∫°n b√®, x√£ h·ªôi
        "b·∫°n", "b√®", "b·∫°n b√®", "t√¨nh b·∫°n", "c√¥ l·∫≠p", "b·ªã b·ªè r∆°i", "b·ªã c√¥ l·∫≠p", "kh√¥ng ai ch∆°i", "m·ªôt m√¨nh", "c√¥ ƒë∆°n", "kh√¥ng c√≥ b·∫°n", "c√¥ ƒë·ªôc",
        // Gia ƒë√¨nh
        "gia ƒë√¨nh", "ba m·∫π", "cha m·∫π", "m·∫π", "b·ªë", "cha", "√¥ng b√†", "b·ªã la", "b·ªã m·∫Øng", "b·ªã √°p l·ª±c", "√°p l·ª±c gia ƒë√¨nh", "xung ƒë·ªôt gia ƒë√¨nh",
        // T√¨nh c·∫£m, y√™u ƒë∆∞∆°ng
        "y√™u", "t√¨nh c·∫£m", "crush", "b·∫°n trai", "b·∫°n g√°i", "m·ªëi quan h·ªá", "chia tay", "c√£i nhau", "g√£y ƒë·ªï",
        // LGBT / Gi·ªõi t√≠nh
        "gay", "les", "lgbt", "ƒë·ªìng t√≠nh", "song t√≠nh", "chuy·ªÉn gi·ªõi", "gi·ªõi t√≠nh", "b·ªã k·ª≥ th·ªã", "k·ª≥ th·ªã", "coming out", "queer", "b·ªã ba m·∫π k·ª≥ th·ªã", "b·ªã gia ƒë√¨nh k·ª≥ th·ªã",
        // Stress, lo √¢u
        "stress", "lo l·∫Øng", "cƒÉng th·∫≥ng", "m·ªát m·ªèi", "ki·ªát s·ª©c", "b·ªã tr·∫ßm c·∫£m", "bu·ªìn",
        // B·∫Øt n·∫°t, b·∫°o l·ª±c
        "b·∫Øt n·∫°t", "b·ªã b·∫Øt n·∫°t", "b·∫°o l·ª±c", "b·∫°o h√†nh", "b·ªã ƒë√°nh", "b·ªã ch·ª≠i",
        // T·ª± ti, √°p l·ª±c b·∫£n th√¢n
        "t·ª± ti", "gh√©t b·∫£n th√¢n", "t·ªá h·∫°i", "kh√¥ng gi·ªèi", "v√¥ d·ª•ng", "kh√¥ng ai y√™u", "kh√¥ng ai hi·ªÉu",
        // Kh√°c
        "s·ª©c kh·ªèe", "th√¢n th·ªÉ", "ngo·∫°i h√¨nh", "b√©o", "·ªëm", "m·∫≠p", "g·∫ßy", "t·ª± h·∫°i", "t·ª± l√†m ƒëau"
    ];
    return keywords.some(keyword => lowerMsg.includes(keyword));
}

// ====== Initialize App ======
document.addEventListener('DOMContentLoaded', () => {
    initializeLanguageSelection();
    initializeNavigation();
    initializeMoodTracker();
    initializeChat();
    initializeRecommendations();
    initializeBreathingExercise();
    initializeProfile();
    generateMoodCalendar();
});

// ====== Chat System (Updated with Gemini API) ======
function initializeChat() {
    const messageInput = document.querySelector('.message-input');
    const sendButton = document.getElementById('send-message');
    const chatBody = document.querySelector('.chat-body');
    
    if (!messageInput || !sendButton) return;
    
    sendButton.addEventListener('click', () => sendMessage());
    
    messageInput.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendMessage();
        }
    });
}

function sendMessage() {
    const messageInput = document.querySelector('.message-input');
    const chatBody = document.querySelector('.chat-body');
    
    const message = messageInput.value.trim();
    if (!message) return;
    
    // Add user message
    const userMessageDiv = document.createElement('div');
    userMessageDiv.className = 'message user-message';
    userMessageDiv.innerHTML = `<div class="message-text">${message}</div>`;
    chatBody.appendChild(userMessageDiv);
    
    messageInput.value = '';
    
    // Scroll to bottom
    chatBody.scrollTop = chatBody.scrollHeight;
    
    // Check for known cause
    if (!knownCause && detectKnownCause(message)) {
        knownCause = true;
    }
    
    // Show typing indicator
    setTimeout(() => {
        const typingDiv = document.createElement('div');
        typingDiv.className = 'message bot-message thinking';
        typingDiv.innerHTML = `
            ${getSVGIcon()}
            <div class="message-text">
                <div class="thinking-indicator">
                    <div class="dot"></div>
                    <div class="dot"></div>
                    <div class="dot"></div>
                </div>
            </div>
        `;
        chatBody.appendChild(typingDiv);
        chatBody.scrollTop = chatBody.scrollHeight;
        
        // Generate bot response with Gemini API
        generateBotResponse(message, typingDiv);
    }, 600);
}

function showBotGreeting() {
    const chatBody = document.querySelector('.chat-body');
    if (!chatBody) return;
    
    const greetings = {
        vi: `Ch√†o b·∫°n! M√¨nh l√† <strong>Calmi</strong> ‚Äì m·ªôt ng∆∞·ªùi b·∫°n ·∫£o lu√¥n s·∫µn s√†ng l·∫Øng nghe v√† ƒë·ªìng h√†nh c√πng b·∫°n üòä  M·ªçi ph·∫£n h·ªìi ƒë·ªÅu do AI t·∫°o ra v√† ch·ªâ mang t√≠nh tham kh·∫£o, kh√¥ng thay th·∫ø cho t∆∞ v·∫•n chuy√™n m√¥n üíõ  
B·∫°n mu·ªën chia s·∫ª ƒëi·ªÅu g√¨ h√¥m nay?`,
        en: `Hi there! I'm <strong>Calmi</strong> ‚Äì your virtual companion who's here to listen and support you üòä  All responses are AI-generated and should be seen as support, not a replacement for professional advice üíõ  
What would you like to share today?`
    };
    
    const greetingDiv = document.createElement('div');
    greetingDiv.className = 'message bot-message';
    greetingDiv.innerHTML = `
        ${getSVGIcon()}
        <div class="message-text">${greetings[userLang]}</div>
    `;
    chatBody.appendChild(greetingDiv);
}

async function generateBotResponse(userMessage, typingDiv) {
    const messageElement = typingDiv.querySelector(".message-text");
    
    let dynamicPrompt = "";
    if (!knownCause) {
        dynamicPrompt = userLang === 'vi' 
            ? `H√£y ch·ªâ l·∫Øng nghe v√† h·ªèi nh·∫π nh√†ng th√™m ƒë·ªÉ hi·ªÉu r√µ ƒëi·ªÅu khi·∫øn b·∫°n ·∫•y stress, bu·ªìn, lo l·∫Øng, KH√îNG ƒë∆∞a ra l·ªùi khuy√™n v·ªôi.`
            : `Just listen and gently ask more to understand what's making them stressed, sad, or anxious. DO NOT rush to give advice.`;
    } else {
        dynamicPrompt = userLang === 'vi'
            ? `B·∫°n ƒë√£ bi·∫øt nguy√™n nh√¢n khi·∫øn b·∫°n ·∫•y stress, bu·ªìn, lo l·∫Øng, gi·ªù b·∫°n c√≥ th·ªÉ ƒë∆∞a ra m·ªôt l·ªùi khuy√™n nh·∫π nh√†ng, th·ª±c t·∫ø, kh√¥ng ph√°n x√©t, kh√¥ng √©p bu·ªôc.`
            : `You now know the cause of their stress, sadness, or anxiety. You can now offer gentle, practical, non-judgmental, non-forcing advice.`;
    }
    
    const fullPrompt = `${basePrompt[userLang]}\n${dynamicPrompt}\n\n${userLang === 'vi' ? 'Ng∆∞·ªùi d√πng chia s·∫ª' : 'User shares'}:\n"${userMessage}"`;
    
    const requestOptions = {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
            contents: [
                {
                    role: "user",
                    parts: [{ text: fullPrompt }]
                }
            ]
        })
    };
    
    try {
        const response = await fetch(API_URL, requestOptions);
        const data = await response.json();
        console.log("API response:", data);
        
        if (!response.ok || !data.candidates || !data.candidates[0]) {
            throw new Error(data.error?.message || "Unknown error");
        }
        
        const apiResponseText = data.candidates[0].content.parts[0].text
            .replace(/\*\*(.*?)\*\*/g, "$1")
            .trim();
        
        messageElement.innerHTML = apiResponseText;
    } catch (error) {
        console.error("Error generating bot response:", error);
        messageElement.innerHTML = userLang === 'vi' 
            ? "Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i."
            : "Sorry, an error occurred. Please try again.";
    } finally {
        typingDiv.classList.remove("thinking");
        const chatBody = document.querySelector('.chat-body');
        chatBody.scrollTop = chatBody.scrollHeight;
    }
}

function getSVGIcon() {
    return `<svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" viewBox="0 0 1024 1024">
        <path d="M738.3 287.6H285.7c-59 0-106.8 47.8-106.8 106.8v303.1c0 59 47.8 106.8 106.8 106.8h81.5v111.1c0 .7.8 1.1 1.4.7l166.9-110.6 41.8-.8h117.4l43.6-.4c59 0 106.8-47.8 106.8-106.8V394.5c0-59-47.8-106.9-106.8-106.9zM351.7 448.2c0-29.5 23.9-53.5 53.5-53.5s53.5 23.9 53.5 53.5-23.9 53.5-53.5 53.5-53.5-23.9-53.5-53.5zm157.9 267.1c-67.8 0-123.8-47.5-132.3-109h264.6c-8.6 61.5-64.5 109-132.3 109zm110-213.7c-29.5 0-53.5-23.9-53.5-53.5s23.9-53.5 53.5-53.5 53.5 23.9 53.5 53.5-23.9 53.5-53.5 53.5zM867.2 644.5V453.1h26.5c19.4 0 35.1 15.7 35.1 35.1v121.1c0 19.4-15.7 35.1-35.1 35.1h-26.5zM95.2 609.4V488.2c0-19.4 15.7-35.1 35.1-35.1h26.5v191.3h-26.5c-19.4 0-35.1-15.7-35.1-35.1zM561.5 149.6c0 23.4-15.6 43.3-36.9 49.7v44.9h-30v-44.9c-21.4-6.5-36.9-26.3-36.9-49.7 0-28.6 23.3-51.9 51.9-51.9s51.9 23.3 51.9 51.9z"></path>
    </svg>`;
}

// ====== Recommendations ======
function initializeRecommendations() {
    const tabs = document.querySelectorAll('.rec-tab');
    const contents = document.querySelectorAll('.rec-content');
    
    tabs.forEach(tab => {
        tab.addEventListener('click', () => {
            const targetTab = tab.dataset.tab;
            
            tabs.forEach(t => t.classList.remove('active'));
            contents.forEach(c => c.classList.remove('active'));
            
            tab.classList.add('active');
            document.getElementById(`${targetTab}-content`)?.classList.add('active');
        });
    });
}

function generateMoodBasedRecommendations(mood) {
    // Generate personalized recommendations based on mood
    if (mood === 'sad' || mood === 'very-sad') {
        // Show uplifting content
        showNotification('Ch√∫ng t√¥i ƒë√£ c·∫≠p nh·∫≠t g·ª£i √Ω ph√π h·ª£p v·ªõi t√¢m tr·∫°ng c·ªßa b·∫°n', 'info');
    } else if (mood === 'very-happy' || mood === 'happy') {
        // Show content to maintain positive mood
        showNotification('Tuy·ªát v·ªùi! H√£y duy tr√¨ t√¢m tr·∫°ng t√≠ch c·ª±c n√†y nh√©!', 'success');
    }
}

// ====== Breathing Exercise ======
function initializeBreathingExercise() {
    const breathingBtn = document.querySelector('.breathing-btn');
    const breathingExercise = document.querySelector('.breathing-exercise');
    const closeBtn = document.querySelector('.close-breathing');
    const breathingText = document.querySelector('.breathing-text');
    
    if (!breathingBtn || !breathingExercise) return;
    
    breathingBtn.addEventListener('click', () => {
        breathingExercise.classList.remove('hidden');
        startBreathingAnimation();
    });
    
    closeBtn?.addEventListener('click', () => {
        breathingExercise.classList.add('hidden');
    });
    
    function startBreathingAnimation() {
        const phases = [
            { text: 'H√≠t v√†o...', duration: 4000 },
            { text: 'Gi·ªØ...', duration: 4000 },
            { text: 'Th·ªü ra...', duration: 4000 }
        ];
        
        let currentPhase = 0;
        
        function animatePhase() {
            if (breathingExercise.classList.contains('hidden')) return;
            
            breathingText.textContent = phases[currentPhase].text;
            currentPhase = (currentPhase + 1) % phases.length;
            
            setTimeout(animatePhase, phases[currentPhase].duration);
        }
        
        animatePhase();
    }
}

// ====== Profile ======
function initializeProfile() {
    const profileName = document.querySelector('.profile-name');
    const profileBio = document.querySelector('.profile-bio');
    
    // Load saved profile
    const savedProfile = JSON.parse(localStorage.getItem('userProfile')) || {};
    if (profileName) profileName.value = savedProfile.name || '';
    if (profileBio) profileBio.value = savedProfile.bio || '';
    
    // Save profile on change
    profileName?.addEventListener('input', () => {
        savedProfile.name = profileName.value;
        localStorage.setItem('userProfile', JSON.stringify(savedProfile));
    });
    
    profileBio?.addEventListener('input', () => {
        savedProfile.bio = profileBio.value;
        localStorage.setItem('userProfile', JSON.stringify(savedProfile));
    });
}

// ====== Utility Functions ======
function updateLanguage() {
    // Update UI text based on selected language
    const translations = {
        vi: {
            home: 'Trang ch·ªß',
            mood: 'T√¢m tr·∫°ng',
            chat: 'Tr√≤ chuy·ªán',
            recommendations: 'Kh√°m ph√°',
            profile: 'H·ªì s∆°'
        },
        en: {
            home: 'Home',
            mood: 'Mood',
            chat: 'Chat',
            recommendations: 'Explore',
            profile: 'Profile'
        }
    };
    
    document.querySelectorAll('.nav-text').forEach((element, index) => {
        const keys = Object.keys(translations[userLang]);
        element.textContent = translations[userLang][keys[index]];
    });
}

function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    notification.style.cssText = `
        position: fixed;
        top: 80px;
        right: 20px;
        padding: 15px 20px;
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        z-index: 3000;
        animation: slideIn 0.3s ease;
    `;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.style.animation = 'slideOut 0.3s ease';
        setTimeout(() => notification.remove(), 300);
    }, 3000);
}

// ====== Add CSS animations for notifications ======
const style = document.createElement('style');
style.textContent = `
    @keyframes slideIn {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
    }
    @keyframes slideOut {
        from { transform: translateX(0); opacity: 1; }
        to { transform: translateX(100%); opacity: 0; }
    }
`;
document.head.appendChild(style);
